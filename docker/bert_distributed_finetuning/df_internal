ARG imageVersion
FROM ccr-registry.caas.intel.com/pytorch/pytorch-ipex-spr:${imageVersion}
LABEL maintainer="Hugging Face"
#ENV no_proxy="127.0.0.1,localhost,172*"

ARG DIR=/usr/local

WORKDIR $DIR

ENV PATH=/root/anaconda3/envs/pytorch/bin:$PATH

RUN python3 -m pip install --no-cache-dir --upgrade  pip

# Install mpi
COPY l_mpi_oneapi_p_2021.6.0.602.sh .

RUN ./l_mpi_oneapi_p_2021.6.0.602.sh -a --eula accept -s

# Fetch transformer
RUN git clone https://github.com/huggingface/transformers && cd transformers && python3 -m pip install --no-cache-dir .

# Install accelerate
RUN git clone https://github.com/huggingface/accelerate && cd accelerate && python3 -m pip install --no-cache-dir .

# Install evaluate needed by example
RUN python3 -m pip install evaluate

RUN python3 -m pip install -r ./transformers/examples/pytorch/question-answering/requirements.txt

# ssh config
RUN sed -i '1i export LD_LIBRARY_PATH=/lib64/:$LD_LIBRARY_PATH' /root/.bashrc && source /root/.bashrc && \
yum install -y openssh-clients openssh-server net-tools nfs-utils && \
ssh-keygen -t rsa -f ~/.ssh/id_rsa -P '' && cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys && \
chmod 600 /root/.ssh/authorized_keys && sed -i 's/PermitEmptyPasswords yes/PermitEmptyPasswords no /' /etc/ssh/sshd_config && \
sed -i 's/PermitRootLogin without-password/PermitRootLogin yes /' /etc/ssh/sshd_config && \
echo " StrictHostKeyChecking no" >> /etc/ssh/ssh_config && \
echo " UserKnownHostsFile /dev/null" >> /etc/ssh/ssh_config
RUN ssh-keygen -t dsa -f ~/.ssh/id_dsa -P ''  && ssh-keygen -t ecdsa -f ~/.ssh/id_ecdsa -P '' && ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -P ''
RUN sed -i "s/etc\/ssh\/ssh_host_rsa_key/root\/.ssh\/id_rsa/g" /etc/ssh/sshd_config
RUN sed -i "s/etc\/ssh\/ssh_host_ecdsa_key/root\/.ssh\/id_ecdsa/g" /etc/ssh/sshd_config && \
sed -i "s/etc\/ssh\/ssh_host_ed25519_key/root\/.ssh\/id_ed25519/g" /etc/ssh/sshd_config && \
sed -i "/root\/.ssh\/id_rsa/a HostKey /root/.ssh/id_dsa" /etc/ssh/sshd_config

COPY run_qa_entrypoint.sh .
RUN chmod +x ./run_qa_entrypoint.sh
ENTRYPOINT ["./run_qa_entrypoint.sh"]
